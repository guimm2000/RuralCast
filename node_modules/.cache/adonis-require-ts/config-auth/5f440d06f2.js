"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'web',
    list: {
        web: {
            driver: 'session',
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['email'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxNQUFNLFVBQVUsR0FBZTtJQUM3QixLQUFLLEVBQUUsS0FBSztJQUNaLElBQUksRUFBRTtRQVdKLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxTQUFTO1lBRWpCLFFBQVEsRUFBRTtnQkFTUixNQUFNLEVBQUUsT0FBTztnQkFXZixhQUFhLEVBQUUsSUFBSTtnQkFZbkIsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQWFmLEtBQUssRUFBRSxHQUFHLEVBQUUseUVBQVEsaUJBQWlCLEdBQUM7YUFDdkM7U0FDRjtLQUNGO0NBQ0YsQ0FBQTtBQUVELGtCQUFlLFVBQVUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29uZmlnIHNvdXJjZTogaHR0cHM6Ly9naXQuaW8vSlkwbXBcbiAqXG4gKiBGZWVsIGZyZWUgdG8gbGV0IHVzIGtub3cgdmlhIFBSLCBpZiB5b3UgZmluZCBzb21ldGhpbmcgYnJva2VuIGluIHRoaXMgY29uZmlnXG4gKiBmaWxlLlxuICovXG5cbmltcG9ydCB0eXBlIHsgQXV0aENvbmZpZyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0FkZG9ucy9BdXRoJ1xuXG4vKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IEF1dGhlbnRpY2F0aW9uIE1hcHBpbmdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufFxufCBMaXN0IG9mIGF2YWlsYWJsZSBhdXRoZW50aWNhdGlvbiBtYXBwaW5nLiBZb3UgbXVzdCBmaXJzdCBkZWZpbmUgdGhlbVxufCBpbnNpZGUgdGhlIGBjb250cmFjdHMvYXV0aC50c2AgZmlsZSBiZWZvcmUgbWVudGlvbmluZyB0aGVtIGhlcmUuXG58XG4qL1xuY29uc3QgYXV0aENvbmZpZzogQXV0aENvbmZpZyA9IHtcbiAgZ3VhcmQ6ICd3ZWInLFxuICBsaXN0OiB7XG4gICAgLypcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8IFdlYiBHdWFyZFxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHxcbiAgICB8IFdlYiBndWFyZCB1c2VzIGNsYXNzaWMgb2xkIHNjaG9vbCBzZXNzaW9ucyBmb3IgYXV0aGVudGljYXRpbmcgdXNlcnMuXG4gICAgfCBJZiB5b3UgYXJlIGJ1aWxkaW5nIGEgc3RhbmRhcmQgd2ViIGFwcGxpY2F0aW9uLCBpdCBpcyByZWNvbW1lbmRlZCB0b1xuICAgIHwgdXNlIHdlYiBndWFyZCB3aXRoIHNlc3Npb24gZHJpdmVyXG4gICAgfFxuICAgICovXG4gICAgd2ViOiB7XG4gICAgICBkcml2ZXI6ICdzZXNzaW9uJyxcblxuICAgICAgcHJvdmlkZXI6IHtcbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgRHJpdmVyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgTmFtZSBvZiB0aGUgZHJpdmVyXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgZHJpdmVyOiAnbHVjaWQnLFxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IElkZW50aWZpZXIga2V5XG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVGhlIGlkZW50aWZpZXIga2V5IGlzIHRoZSB1bmlxdWUga2V5IG9uIHRoZSBtb2RlbC4gSW4gbW9zdCBjYXNlcyBzcGVjaWZ5aW5nXG4gICAgICAgIHwgdGhlIHByaW1hcnkga2V5IGlzIHRoZSByaWdodCBjaG9pY2UuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgaWRlbnRpZmllcktleTogJ2lkJyxcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBVaWRzXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVWlkcyBhcmUgdXNlZCB0byBzZWFyY2ggYSB1c2VyIGFnYWluc3Qgb25lIG9mIHRoZSBtZW50aW9uZWQgY29sdW1ucy4gRHVyaW5nXG4gICAgICAgIHwgbG9naW4sIHRoZSBhdXRoIG1vZHVsZSB3aWxsIHNlYXJjaCB0aGUgdXNlciBtZW50aW9uZWQgdmFsdWUgYWdhaW5zdCBvbmVcbiAgICAgICAgfCBvZiB0aGUgbWVudGlvbmVkIGNvbHVtbnMgdG8gZmluZCB0aGVpciB1c2VyIHJlY29yZC5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICB1aWRzOiBbJ2VtYWlsJ10sXG5cbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgTW9kZWxcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBUaGUgbW9kZWwgdG8gdXNlIGZvciBmZXRjaGluZyBvciBmaW5kaW5nIHVzZXJzLiBUaGUgbW9kZWwgaXMgaW1wb3J0ZWRcbiAgICAgICAgfCBsYXppbHkgc2luY2UgdGhlIGNvbmZpZyBmaWxlcyBhcmUgcmVhZCB3YXkgZWFybGllciBpbiB0aGUgbGlmZWN5Y2xlXG4gICAgICAgIHwgb2YgYm9vdGluZyB0aGUgYXBwIGFuZCB0aGUgbW9kZWxzIG1heSBub3QgYmUgaW4gYSB1c2FibGUgc3RhdGUgYXRcbiAgICAgICAgfCB0aGF0IHRpbWUuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgbW9kZWw6ICgpID0+IGltcG9ydCgnQXBwL01vZGVscy9Vc2VyJyksXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGF1dGhDb25maWdcbiJdfQ==